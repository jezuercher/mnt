function quantity_table = modular_rate_law_to_sbtab(network,filename,options)

% quantity_table = modular_rate_law_to_sbtab(network,filename,options)
% 
% Requires the SBtab toolbox

eval(default('options','struct','filename','[]'));
options_default = struct('use_sbml_ids',1);
options         = join_struct(options_default,options);

switch network.kinetics.type
  case {'cs','ms','rp','ma','fm'}, % UPDATE rate law names!
  otherwise, error('Conversion is only possible for modular rate law');
end

if options.use_sbml_ids, 
  metabolites = network.sbml_id_species; 
  reactions   = network.sbml_id_reaction; 
else
  metabolites = network.metabolites; 
  reactions   = network.actions; 
  [metabolites,reactions] = network_adjust_names_for_sbml_export(metabolites,reactions);
end

[nr,nm,nx,KM_indices,KA_indices,KI_indices,nKM,nKA,nKI] = network_numbers(network);


column_quantity = [ repmat({'equilibrium constant'},nr,1); ...
                    repmat({'catalytic rate constant geometric mean'},nr,1); ...
                    repmat({'Michaelis constant'},nKM,1); ...
                    repmat({'activation constant'},nKA,1); ...
                    repmat({'inhibitory constant'},nKI,1); ...
                    repmat({'concentration'},nm,1); ...
                    repmat({'concentration of enzyme'},nr,1); ...
                   ];

column_value =full( [ network.kinetics.Keq; ...
                network.kinetics.KV; ...
                network.kinetics.KM(KM_indices); ...
                network.kinetics.KA(KA_indices); ...
                network.kinetics.KI(KI_indices); ...
                network.kinetics.c ; ...
                network.kinetics.u; ...
              ]);

column_unit = [ repmat({'-'},nr,1); ...
                    repmat({'1/s'},nr,1); ...
                    repmat({'mM'},nKM,1); ...
                    repmat({'mM'},nKA,1); ...
                    repmat({'mM'},nKI,1); ...
                    repmat({'mM'},nm,1); ...
                    repmat({'mM'},nr,1); ...
                   ];    
[iKM,jKM] = ind2sub([nr,nm],KM_indices);
[iKA,jKA] = ind2sub([nr,nm],KA_indices);
[iKI,jKI] = ind2sub([nr,nm],KI_indices);
 
column_reaction = [ reactions; ...
                    reactions; ...
                    reactions(iKM); ...
                    reactions(iKA); ...
                    reactions(iKI); ...
                    repmat({''},nm,1); ...
                    reactions; ...
                   ];    

column_compound = [ repmat({''},nr,1); ...
                    repmat({''},nr,1); ...
                    metabolites(jKM); ...
                    metabolites(jKA); ...
                    metabolites(jKI); ...
                    metabolites; ...
                    repmat({''},nr,1); ...
                  ];

quantity_table = sbtab_table_construct(struct('Type','QuantityData'),...
					 {'QuantityType','Value','SBMLSpeciesID','SBMLReactionID'},...
					 {column_quantity,column_value,column_compound,column_reaction});

if length(filename), 
  sbtab_save_table(quantity_table,struct('filename',filename)); 
end
